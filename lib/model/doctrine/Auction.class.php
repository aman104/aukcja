<?php

/**
 * Auction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    aukcje
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Auction extends BaseAuction
{
	protected $winner = false;

	public function save(Doctrine_Connection $conn = null)
    {
    	DoctrineBugfixesclass::generateSlugOnUpdatedObjectWithI18n($this, $conn, 'name');
		parent::save($conn);
    }

	public function getNextPrice()
	{

		$price = $this->getPrice();		
		if($this->isNewAuction())
		{
			return $price;
		}
		else
		{
			return $this->getNextPriceValue($price);	
		}
		
	}

	public function isLastMinutes($minutes = 30)
	{
		return ((strTotime($this->getExpiredAt()) - time()) < ($minutes*60));
	}

	private $eur = false;

	public function getPricesByCurrencies($curr = 'PLN')
	{

		if( ! $this->eur)
		{
			$this->eur = AuctionConfigTable::getInstance()->findOneByName('EUR')->getValue();
		}

		switch($curr)
		{
			case 'PLN' : $rate = $this->eur; break;
			default : $rate = 1;
		}
		
		$tmp = round($this->getPrice() * $rate, 2);
		$tmp = explode('.', $tmp);
		if(strlen($tmp[1]) == 1)
		{
			$tmp[1] .= '0';
		}
		return $tmp[0].'.'.$tmp[1];
	}

	public function addHistory(sfGuardUser $user, $new_price, $buying_order = 0)
	{

		$this->winner = false;

		$price = $this->getPrice();
		$price_max = $this->getPriceMax();
		$profile_id = $user->Profile->getPrimaryKey();

		$old_winner = $this->getWinner();

		if($new_price > $this->price_max || $this->isNewAuction())
		{
			
			if($buying_order)
			{
				$price_actual = ($this->isNewAuction()) ? $this->getNextPrice() : $this->getNextPriceValue($this->price_max);
			}
			else
			{
				$price_actual =  $new_price;
			}
			$this->removeWinner();
			$this->setPriceMax($new_price);
			$this->setPrice($price_actual);
			$this->setHistory($profile_id, $this->getPrice(), $new_price, true, $buying_order);
		} 		
		elseif($new_price < $this->price_max)
		{			
			$new_price_now = $this->getNextPriceValue($new_price);
			$new_price_now = ($new_price_now > $price_max) ? $price_max : $new_price_now;
			$this->setPrice($new_price_now);
			$this->setHistory($profile_id, $new_price, $new_price, false, $buying_order);

			$history = $this->getHistoryWinner();
			$this->removeWinner();
			$this->setHistory($history->getProfileId(), $new_price_now, $history->getPriceMax(), true, $history->getBuyingOrder());
		}
		elseif($new_price == $this->price_max)
		{
			$history = $this->getHistoryWinner();
			$this->removeWinner();
			$this->setHistory($profile_id, $new_price, $new_price, false, $buying_order);
			$this->setHistory($history->getProfileId(), $new_price, $history->getPriceMax(), true, $history->getBuyingOrder());
			$this->setPrice($new_price);

		}


		$this->winner = false;
		

		//przedluzenie aukcji o 15 min
		$expiredAt = strToTime($this->getExpiredAt());
		$last = ($expiredAt - time());
		
		if($last > 0 && $last <= 900)
		{
			$expiredAt += 15 * 60;
			$this->setExpiredAt(date('Y-m-d H:i:s', $expiredAt));
		}
		$this->save();

		$new_winner = $this->getWinner();

		if($old_winner && $old_winner->getPrimaryKey() != $new_winner->getPrimaryKey())
		{

			$to = $old_winner->getSfGuardUser()->getEmailAddress();
			$url = Tools::abs_url_for('auction', $this);
			switch($old_winner->getCountry())
			{			
				case 'Poland' : 
					$title = 'Twoja oferta została przebita';
					$content = 'Twoja oferta dla aukcji <a href="'.$url.'">'.$url.'</a> została przebita <br /><br />';
					$content .= ' Aktualna cena: '.$this->getPrice().' EUR';
					break;
				case 'China' :
					$title = '您的出价已经出价';
					$content = '您的出价拍卖 <a href="'.$url.'">'.$url.'</a> 被刺破 <br /><br />';
					$content .= ' 当前价格: '.$this->getPrice().' EUR';
					break;
				default: 
					$title = 'Your bid has been outbid';
					$content = 'Your Offer for Auction <a href="'.$url.'">'.$url.'</a> was punctured<br /><br />';
					$content .= ' Actual price: '.$this->getPrice().' EUR';
			}
			
			Tools::sendEmail($to, $title, $content);
		}


	}

	public function getWinnerForce()
	{
		return Doctrine_Query::create()
			->from('AuctionHistory a')
			->leftJoin('a.Profile p')
			->where('a.auction_id =?', $this->getPrimaryKey())
			->addWhere('p.is_deleted =?', false)
			->orderBy('price_max desc')
			->fetchOne();
	}

	public function getNextPriceValue($price)
	{
		if($price <= 500)
		{
			$next = $price + 10;
		}
		elseif($price <= 1000)
		{
			$next = $price + 20;
		}
		elseif($price > 1000)
		{
			$next = $price + 100;
		}
		return $next;
	}	

	private function removeWinner()
	{
		$histories = $this->getAuctionHistory();
		foreach($histories as $one)
		{
			$one->setIsWinner(false);
			$one->save();
		}		
	}

	

	public function getHistoryWinner()
	{
		if( ! $this->winner)
		{
			$this->winner = Doctrine_Query::create()
			->from('AuctionHistory a')
			->leftJoin('a.Profile p')
			->leftJoin('p.sfGuardUser u')
			->where('auction_id =?', $this->getPrimaryKey())
			->andWhere('is_winner =?', true)
			->fetchOne();
		}
		return $this->winner;
	}

	public function getAllHistory()
	{
		$q = Doctrine_Query::create()
			->from('AuctionHistory a')
			->where('a.auction_id =?', $this->getPrimaryKey())
			->leftJoin('a.Profile p')
			->leftJoin('p.sfGuardUser u')
			->orderBy('a.id desc')
			;
		return $q->execute();
	}

	private function setHistory($profile_id, $price_actual, $price_max, $is_winner, $buying_order = 0)
	{
		$history = new AuctionHistory();
		$history->setAuctionId($this->getPrimaryKey());
		$history->setProfileId($profile_id);
		$history->setIsWinner($is_winner);
		$history->setPriceMax($price_max);
		$history->setPriceActual($price_actual);
		$history->setBuyingOrder($buying_order);
		$history->save();
		return $history;
	}

	public function isActualWinner()
	{
		$user = sfContext::getInstance()->getUser()->getGuardUser()->Profile;
		$winner = $this->getHistoryWinner();
		if($winner && $winner->getProfileId() == $user->getPrimaryKey())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public function isNewAuction()
	{
		return (count($this->getAuctionHistory()) > 0) ? false : true;
	}

	public function isEnd()
	{
		return ($this->getIsEnd() || $this->getExpiredAt() <  date('Y-m-d H:i:s', time()));
	}	

	public function getWinner()
	{
		$winner = $this->getHistoryWinner();
		if($winner)
		{
			return $winner->getProfile();
		}
		else
		{
			return false;
		}
	}

	public function getDefaultPicture()
	{
		$q = Doctrine_Query::create()
			->from('Picture')
			->where('auction_id =?', $this->getPrimaryKey())
			->andWhere('is_default =?', true);
		return $q->fetchOne();
	}

	public function getPicturesWithoutDefault()
	{
		$q = Doctrine_Query::create()
			->from('Picture')
			->where('auction_id =?', $this->getPrimaryKey())
			->andWhere('is_default =?', false)
			->orderBy('position asc');
		return $q->execute();	
	}

	public function setToEnd($params)
	{
		$this->setIsEnd(true);		
		$this->save();
		$winner = $this->getWinner();
		if($winner)
		{

			switch($winner->getCountry())
			{
				case 'Poland' : 
					$title = 'Wygrałeś aukcje';
					$content = 'Wygrałeś aukcje <br /><br />';
					break;
				case 'China' :
					$title = '赢得拍卖';
					$content = '赢得拍卖 <br /><br />';
					break;
				default: 
					$title = 'You win auctions';
					$content = 'You win auctions <br /><br />';
			}

			$to = $winner->getSfGuardUser()->getEmailAddress();				
			$url = $params['url'];
			$content .= '<a href="'.$url.'">'.$url.'</a>';
			Tools::sendEmail($to, $title, $content);

			$admin = sfGuardUserTable::getInstance()->findOneByUsername('admin');
			$title = 'Koniec aukcji';
			$content = 'Aukcja: ';
			$url = $params['url'];
			$content .= '<a href="'.$url.'">'.$url.'</a><br /><br />';

			$content .= 'Zwycięzca: <br />';
			$content .= 'Imię: '.$winner->getSfGuardUser()->getFirstName().'<br />';
			$content .= 'Nazwisko: '.$winner->getSfGuardUser()->getLastName().'<br />';
			$content .= 'Login: '.$winner->getSfGuardUser()->getUsername().'<br />';
			$content .= 'Email: '.$winner->getSfGuardUser()->getEmailAddress().'<br />';
			$content .= 'Ulica: '.$winner->getStreet().'<br />';
			$content .= 'Kod pocztowy: '.$winner->getPostCode().'<br />';
			$content .= 'Miasto: '.$winner->getCity().'<br />';
			$content .= 'Kraj: '.$winner->getCountry().'<br /><br />';
			$content .= 'Telefon: '.$winner->getPhone().'<br /><br />';
			$content .= 'Telefon kom.: '.$winner->getMobile().'<br /><br />';


			$content .= 'Cena końcowa: '.$this->getPrice().' EUR<br /><br />';			

			Tools::sendEmail($admin->getEmailAddress(), $title, $content);

		}
	}

	public function getLicitationProfiles()
	{
		$q = Doctrine_Query::create()
			->from('Profile p')
			->leftJoin('p.AuctionHistory h')
			->leftJoin('p.sfGuardUser u')
			->where('h.auction_id =?', $this->getPrimaryKey())
			;

		$profiles = $q->execute();
		return $profiles;

	}

	public function changeBuyingOrder($price)
	{
		
		if($this->isActualWinner())
		{
			$historyWinner = $this->getHistoryWinner();	
			if($historyWinner->getBuyingOrder() && $price > $historyWinner->getPriceMax())
			{
				$historyWinner->setPriceMax($price);
				$historyWinner->save();
				$this->setPriceMax($price);
				$this->save();
				return true;
			}
		}

		return false;
	}

	public function getOrderedPictures()
	{
		$pictures = $this->getPictures();
		$new = array();
		foreach($pictures as $picture)
		{
			$new[$picture->getPosition()] = $picture;
		}
		ksort($new);
		return $new;
	}

}


